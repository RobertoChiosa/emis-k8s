services:
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    ports:
      - 3000:3000
    volumes:
      - /homepage/config:/app/config # Make sure your local config directory exists
      - /var/run/docker.sock:/var/run/docker.sock # (optional) For docker integrations
#  db:
#    container_name: db
#    image: timescale/timescaledb-ha:pg16 # use official timescal postgres image
#    restart: unless-stopped
#    environment:
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      POSTGRES_DB: ${POSTGRES_DB}
#    volumes:
#      - ./postgres:/docker-entrypoint-initdb.d
#    ports:
#      - 5432:5432
#  graphdb:
#    container_name: graphdb
#    image: ontotext/graphdb:10.7.2
#    restart: unless-stopped
#    ports:
#      - 7200:7200
#      - 7300:7300
#    environment:
#      GDB_JAVA_OPTS: >-
#        -Xmx4g -Xms4g
#        -Dgraphdb.home=/opt/graphdb/home
#        -Dgraphdb.workbench.importDirectory=/opt/graphdb/home/graphdb-import
#        -Dgraphdb.workbench.cors.enable=true
#    volumes:
#      - ./graphdb/graphdb-data:/opt/graphdb/home
#  api:
#    container_name: api
#    build: ./api/ # path to service's Dockerfile
#    restart: unless-stopped
#    environment:
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#      POSTGRES_DB: ${POSTGRES_DB}
#    ports:
#      - 8000:8000
#  #    depends_on: # explicitly define dependency
#  #      - db
#  #      - graphdb
#  frontend: # frontend service
#    container_name: frontend
#    build: ./frontend/ # path to service's Dockerfile
#    restart: unless-stopped
#    ports:
#      - 8080:8080
#    volumes:
#      - ./frontend/src:/app/src
#      - ./frontend/public:/app/public
#volumes:
#  postgres-data:
